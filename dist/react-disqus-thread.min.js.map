{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///./dist/react-disqus-thread.min.js","webpack:///webpack/bootstrap aaf66a4a99e220d62cad","webpack:///./lib/main.js","webpack:///./lib/components/DisqusThread.js","webpack:///external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_2__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","copyProps","context","props","prefix","arguments","length","undefined","Object","keys","forEach","prop","_react","_react2","DISQUS_PROPS","DISQUS_CONFIG_ONLY_PROPS","DISQUS_CALLBACKS","__disqusAdded","createClass","displayName","propTypes","PropTypes","string","shortname","isRequired","identifier","title","url","category_id","remote_auth_s3","api_key","onNewComment","func","getDefaultProps","componentDidMount","loadDisqus","componentDidUpdate","render","createElement","href","className","addDisqusScript","child","disqus","document","parent","getElementsByTagName","async","type","src","appendChild","_this","window","location","replace","configOnlyProps","callbacks","DISQUS","reset","reload","config","page"],"mappings":"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","file":"/Users/angel/Documents/Git/react-disqus-thread/dist/react-disqus-thread.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactDisqusThread\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ReactDisqusThread\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactDisqusThread\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"ReactDisqusThread\"] = factory(root[\"React\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(1);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar DISQUS_PROPS = ['shortname', 'identifier', 'title', 'url', 'category_id'];\n\tvar DISQUS_CONFIG_ONLY_PROPS = ['remote_auth_s3', 'api_key'];\n\tvar DISQUS_CALLBACKS = ['onNewComment'];\n\tvar __disqusAdded = false;\n\t\n\tfunction copyProps(context, props) {\n\t  var prefix = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];\n\t\n\t  Object.keys(props).forEach(function (prop) {\n\t    context[prefix + prop] = props[prop];\n\t  });\n\t}\n\t\n\tmodule.exports = _react2['default'].createClass({\n\t  displayName: 'DisqusThread',\n\t\n\t  propTypes: {\n\t    id: _react2['default'].PropTypes.string,\n\t\n\t    /**\n\t     * `shortname` tells the Disqus service your forum's shortname,\n\t     * which is the unique identifier for your website as registered\n\t     * on Disqus. If undefined , the Disqus embed will not load.\n\t     */\n\t    shortname: _react2['default'].PropTypes.string.isRequired,\n\t\n\t    /**\n\t     * `identifier` tells the Disqus service how to identify the\n\t     * current page. When the Disqus embed is loaded, the identifier\n\t     * is used to look up the correct thread. If disqus_identifier\n\t     * is undefined, the page's URL will be used. The URL can be\n\t     * unreliable, such as when renaming an article slug or changing\n\t     * domains, so we recommend using your own unique way of\n\t     * identifying a thread.\n\t     */\n\t    identifier: _react2['default'].PropTypes.string,\n\t\n\t    /**\n\t     * `title` tells the Disqus service the title of the current page.\n\t     * This is used when creating the thread on Disqus for the first time.\n\t     * If undefined, Disqus will use the <title> attribute of the page.\n\t     * If that attribute could not be used, Disqus will use the URL of the page.\n\t     */\n\t    title: _react2['default'].PropTypes.string,\n\t\n\t    /**\n\t     * `url` tells the Disqus service the URL of the current page.\n\t     * If undefined, Disqus will take the window.location.href.\n\t     * This URL is used to look up or create a thread if disqus_identifier\n\t     * is undefined. In addition, this URL is always saved when a thread is\n\t     * being created so that Disqus knows what page a thread belongs to.\n\t     */\n\t    url: _react2['default'].PropTypes.string,\n\t\n\t    /**\n\t     * `category_id` tells the Disqus service the category to be used for\n\t     * the current page. This is used when creating the thread on Disqus\n\t     * for the first time.\n\t     */\n\t    category_id: _react2['default'].PropTypes.string,\n\t\n\t    /**\n\t     * `remote_auth_s3` is the generated payload which authenticates users with Disqus.\n\t     * Check https://help.disqus.com/customer/portal/articles/236206 for more.\n\t     */\n\t    remote_auth_s3: _react2['default'].PropTypes.string,\n\t\n\t    /**\n\t     * `api_key` is the public key for your Disqus application.\n\t     * Check https://help.disqus.com/customer/portal/articles/236206 for more.\n\t     */\n\t    api_key: _react2['default'].PropTypes.string,\n\t\n\t    /**\n\t     * `onNewComment` function accepts one parameter `comment` which is a\n\t     * JavaScript object with comment `id` and `text`. This allows you to track\n\t     * user comments and replies and run a script after a comment is posted.\n\t     */\n\t    onNewComment: _react2['default'].PropTypes.func\n\t  },\n\t\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      shortname: null,\n\t      identifier: null,\n\t      title: null,\n\t      url: null,\n\t      category_id: null,\n\t      onNewComment: null\n\t    };\n\t  },\n\t\n\t  componentDidMount: function componentDidMount() {\n\t    this.loadDisqus();\n\t  },\n\t\n\t  componentDidUpdate: function componentDidUpdate() {\n\t    this.loadDisqus();\n\t  },\n\t\n\t  render: function render() {\n\t    return _react2['default'].createElement(\n\t      'div',\n\t      this.props,\n\t      _react2['default'].createElement('div', { id: 'disqus_thread' }),\n\t      _react2['default'].createElement(\n\t        'noscript',\n\t        null,\n\t        _react2['default'].createElement(\n\t          'span',\n\t          null,\n\t          'Please enable JavaScript to view the',\n\t          _react2['default'].createElement(\n\t            'a',\n\t            { href: 'http://disqus.com/?ref_noscript' },\n\t            'comments powered by Disqus.'\n\t          )\n\t        )\n\t      ),\n\t      _react2['default'].createElement(\n\t        'a',\n\t        { href: 'http://disqus.com', className: 'dsq-brlink' },\n\t        'Blog comments powered by ',\n\t        _react2['default'].createElement(\n\t          'span',\n\t          { className: 'logo-disqus' },\n\t          'Disqus'\n\t        ),\n\t        '.'\n\t      )\n\t    );\n\t  },\n\t\n\t  addDisqusScript: function addDisqusScript() {\n\t    if (__disqusAdded) {\n\t      return;\n\t    }\n\t\n\t    var child = this.disqus = document.createElement('script');\n\t    var parent = document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0];\n\t\n\t    child.async = true;\n\t    child.type = 'text/javascript';\n\t    child.src = '//' + this.props.shortname + '.disqus.com/embed.js';\n\t\n\t    parent.appendChild(child);\n\t    __disqusAdded = true;\n\t  },\n\t\n\t  loadDisqus: function loadDisqus() {\n\t    var _this = this;\n\t\n\t    var props = {};\n\t    DISQUS_PROPS.forEach(function (prop) {\n\t      if (!!_this.props[prop]) {\n\t        props[prop] = _this.props[prop];\n\t      }\n\t    });\n\t\n\t    // Always set URL\n\t    if (!props.url || !props.url.length) {\n\t      props.url = window.location.href;\n\t\n\t      // Disqus needs hashbang URL, see https://help.disqus.com/customer/portal/articles/472107\n\t      props.url = props.url.replace(/#/, '') + '#!newthread';\n\t    }\n\t\n\t    var configOnlyProps = {};\n\t    DISQUS_CONFIG_ONLY_PROPS.forEach(function (prop) {\n\t      if (!!_this.props[prop]) {\n\t        configOnlyProps[prop] = _this.props[prop];\n\t      }\n\t    });\n\t\n\t    var callbacks = {};\n\t    DISQUS_CALLBACKS.forEach(function (prop) {\n\t      if (typeof _this.props[prop] === 'function') {\n\t        callbacks[prop] = [_this.props[prop]];\n\t      }\n\t    });\n\t\n\t    // If Disqus has already been added, reset it\n\t    if (typeof DISQUS !== 'undefined') {\n\t      DISQUS.reset({\n\t        reload: true,\n\t        config: function config() {\n\t          copyProps(this.page, props);\n\t          copyProps(this.page, configOnlyProps);\n\t          copyProps(this.callbacks, callbacks);\n\t        }\n\t      });\n\t    } else {\n\t      // Otherwise add Disqus to the page\n\t      copyProps(window, props, 'disqus_');\n\t      copyProps(window, {\n\t        config: function config() {\n\t          copyProps(this.page, configOnlyProps);\n\t          copyProps(this.callbacks, callbacks);\n\t        }\n\t      }, 'disqus_');\n\t      this.addDisqusScript();\n\t    }\n\t  }\n\t});\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ./dist/react-disqus-thread.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap aaf66a4a99e220d62cad\n **/","module.exports = require('./components/DisqusThread');\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/main.js\n **/","import React from 'react';\nconst DISQUS_PROPS = [\n  'shortname',\n  'identifier',\n  'title',\n  'url',\n  'category_id'\n];\nconst DISQUS_CONFIG_ONLY_PROPS = ['remote_auth_s3', 'api_key'];\nconst DISQUS_CALLBACKS = ['onNewComment'];\nlet __disqusAdded = false;\n\nfunction copyProps(context, props) {\n  var prefix = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];\n\n  Object.keys(props).forEach(function (prop) {\n    context[prefix + prop] = props[prop];\n  });\n}\n\nmodule.exports = React.createClass({\n  displayName: 'DisqusThread',\n\n  propTypes: {\n    id: React.PropTypes.string,\n\n    /**\n     * `shortname` tells the Disqus service your forum's shortname,\n     * which is the unique identifier for your website as registered\n     * on Disqus. If undefined , the Disqus embed will not load.\n     */\n    shortname: React.PropTypes.string.isRequired,\n\n    /**\n     * `identifier` tells the Disqus service how to identify the\n     * current page. When the Disqus embed is loaded, the identifier\n     * is used to look up the correct thread. If disqus_identifier\n     * is undefined, the page's URL will be used. The URL can be\n     * unreliable, such as when renaming an article slug or changing\n     * domains, so we recommend using your own unique way of\n     * identifying a thread.\n     */\n    identifier: React.PropTypes.string,\n\n    /**\n     * `title` tells the Disqus service the title of the current page.\n     * This is used when creating the thread on Disqus for the first time.\n     * If undefined, Disqus will use the <title> attribute of the page.\n     * If that attribute could not be used, Disqus will use the URL of the page.\n     */\n    title: React.PropTypes.string,\n\n    /**\n     * `url` tells the Disqus service the URL of the current page.\n     * If undefined, Disqus will take the window.location.href.\n     * This URL is used to look up or create a thread if disqus_identifier\n     * is undefined. In addition, this URL is always saved when a thread is\n     * being created so that Disqus knows what page a thread belongs to.\n     */\n    url: React.PropTypes.string,\n\n    /**\n     * `category_id` tells the Disqus service the category to be used for\n     * the current page. This is used when creating the thread on Disqus\n     * for the first time.\n     */\n    category_id: React.PropTypes.string,\n\n    /**\n     * `remote_auth_s3` is the generated payload which authenticates users with Disqus.\n     * Check https://help.disqus.com/customer/portal/articles/236206 for more.\n     */\n    remote_auth_s3: React.PropTypes.string,\n\n    /**\n     * `api_key` is the public key for your Disqus application.\n     * Check https://help.disqus.com/customer/portal/articles/236206 for more.\n     */\n    api_key: React.PropTypes.string,\n\n    /**\n     * `onNewComment` function accepts one parameter `comment` which is a\n     * JavaScript object with comment `id` and `text`. This allows you to track\n     * user comments and replies and run a script after a comment is posted.\n     */\n    onNewComment: React.PropTypes.func\n  },\n\n  getDefaultProps() {\n    return {\n      shortname: null,\n      identifier: null,\n      title: null,\n      url: null,\n      category_id: null,\n      onNewComment: null\n    };\n  },\n\n  componentDidMount() {\n    this.loadDisqus();\n  },\n\n  componentDidUpdate() {\n    this.loadDisqus();\n  },\n\n  render() {\n    return (\n      <div {...this.props}>\n        <div id=\"disqus_thread\"/>\n        <noscript>\n          <span>\n            Please enable JavaScript to view the\n            <a href=\"http://disqus.com/?ref_noscript\">comments powered by Disqus.</a>\n          </span>\n        </noscript>\n        <a href=\"http://disqus.com\" className=\"dsq-brlink\">\n          Blog comments powered by <span className=\"logo-disqus\">Disqus</span>.\n        </a>\n      </div>\n    );\n  },\n\n  addDisqusScript() {\n    if (__disqusAdded) {\n      return;\n    }\n\n    const child = this.disqus = document.createElement('script');\n    const parent = document.getElementsByTagName('head')[0] ||\n                 document.getElementsByTagName('body')[0];\n\n    child.async = true;\n    child.type = 'text/javascript';\n    child.src = '//' + this.props.shortname + '.disqus.com/embed.js';\n\n    parent.appendChild(child);\n    __disqusAdded = true;\n  },\n\n  loadDisqus() {\n    const props = {};\n    DISQUS_PROPS.forEach((prop) => {\n      if (!!this.props[prop]) {\n        props[prop] = this.props[prop];\n      }\n    });\n\n    // Always set URL\n    if (!props.url || !props.url.length) {\n      props.url = window.location.href;\n\n      // Disqus needs hashbang URL, see https://help.disqus.com/customer/portal/articles/472107\n      props.url = props.url.replace(/#/, '') + '#!newthread';\n    }\n\n    const configOnlyProps = {};\n    DISQUS_CONFIG_ONLY_PROPS.forEach((prop) => {\n      if (!!this.props[prop]) {\n        configOnlyProps[prop] = this.props[prop];\n      }\n    });\n\n    const callbacks = {};\n    DISQUS_CALLBACKS.forEach((prop) => {\n      if (typeof this.props[prop] === 'function') {\n        callbacks[prop] = [this.props[prop]];\n      }\n    });\n\n    // If Disqus has already been added, reset it\n    if (typeof DISQUS !== 'undefined') {\n      DISQUS.reset({\n        reload: true,\n        config: function config() {\n          copyProps(this.page, props);\n          copyProps(this.page, configOnlyProps);\n          copyProps(this.callbacks, callbacks);\n        }\n      });\n    } else { // Otherwise add Disqus to the page\n      copyProps(window, props, 'disqus_');\n      copyProps(window, {\n        config: function config() {\n          copyProps(this.page, configOnlyProps);\n          copyProps(this.callbacks, callbacks);\n        }\n      }, 'disqus_');\n      this.addDisqusScript();\n    }\n  }\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/components/DisqusThread.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}\n ** module id = 2\n ** module chunks = 0\n **/"],"sourceRoot":""}